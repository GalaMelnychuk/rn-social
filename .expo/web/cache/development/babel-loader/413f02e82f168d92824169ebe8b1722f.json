{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/galocka/rn-social/node_modules/react-native-elements/src/checkbox/CheckBox.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport NativeText from \"react-native-web/dist/exports/Text\";\nimport TextElement from \"../text/Text\";\nimport CheckBoxIcon from \"./CheckBoxIcon\";\nimport { fonts, ViewPropTypes, withTheme } from \"../config\";\n\nvar CheckBox = function CheckBox(props) {\n  var theme = props.theme,\n      rest = _objectWithoutProperties(props, [\"theme\"]);\n\n  var Component = rest.Component,\n      checked = rest.checked,\n      iconRight = rest.iconRight,\n      title = rest.title,\n      titleProps = rest.titleProps,\n      center = rest.center,\n      right = rest.right,\n      containerStyle = rest.containerStyle,\n      textStyle = rest.textStyle,\n      wrapperStyle = rest.wrapperStyle,\n      onPress = rest.onPress,\n      onLongPress = rest.onLongPress,\n      checkedTitle = rest.checkedTitle,\n      fontFamily = rest.fontFamily,\n      _rest$checkedColor = rest.checkedColor,\n      checkedColor = _rest$checkedColor === void 0 ? theme.colors.primary : _rest$checkedColor,\n      attributes = _objectWithoutProperties(rest, [\"Component\", \"checked\", \"iconRight\", \"title\", \"titleProps\", \"center\", \"right\", \"containerStyle\", \"textStyle\", \"wrapperStyle\", \"onPress\", \"onLongPress\", \"checkedTitle\", \"fontFamily\", \"checkedColor\"]);\n\n  var accessibilityState = {\n    checked: !!checked\n  };\n  return React.createElement(Component, _extends({\n    accessibilityRole: \"checkbox\",\n    accessibilityState: accessibilityState,\n    testID: \"checkbox\"\n  }, attributes, {\n    onLongPress: onLongPress,\n    onPress: onPress,\n    style: StyleSheet.flatten([styles.container, title && styles.containerHasTitle, containerStyle && containerStyle]),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }), React.createElement(View, {\n    style: StyleSheet.flatten([styles.wrapper, right && {\n      justifyContent: 'flex-end'\n    }, center && {\n      justifyContent: 'center'\n    }, wrapperStyle && wrapperStyle]),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, !iconRight && React.createElement(CheckBoxIcon, _extends({}, props, {\n    checkedColor: checkedColor,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 24\n    }\n  })), React.isValidElement(title) ? title : React.createElement(TextElement, _extends({\n    testID: \"checkboxTitle\",\n    style: StyleSheet.flatten([styles.text(theme), textStyle && textStyle, fontFamily && {\n      fontFamily: fontFamily\n    }])\n  }, titleProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }\n  }), checked ? checkedTitle || title : title), iconRight && React.createElement(CheckBoxIcon, _extends({}, props, {\n    checkedColor: checkedColor,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 23\n    }\n  }))));\n};\n\nCheckBox.propTypes = _objectSpread({}, CheckBoxIcon.propTypes, {\n  Component: PropTypes.elementType,\n  iconRight: PropTypes.bool,\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n  titleProps: PropTypes.object,\n  center: PropTypes.bool,\n  right: PropTypes.bool,\n  containerStyle: ViewPropTypes.style,\n  wrapperStyle: ViewPropTypes.style,\n  textStyle: NativeText.propTypes.style,\n  onPress: PropTypes.func,\n  onLongPress: PropTypes.func,\n  checkedTitle: PropTypes.string,\n  fontFamily: PropTypes.string\n});\nCheckBox.defaultProps = {\n  checked: false,\n  iconRight: false,\n  right: false,\n  center: false,\n  uncheckedColor: '#bfbfbf',\n  checkedIcon: 'check-square-o',\n  uncheckedIcon: 'square-o',\n  size: 24,\n  Component: TouchableOpacity,\n  titleProps: {}\n};\nvar styles = {\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  container: {\n    margin: 5,\n    marginLeft: 10,\n    marginRight: 10,\n    padding: 10\n  },\n  containerHasTitle: {\n    borderWidth: 1,\n    borderRadius: 3,\n    backgroundColor: '#fafafa',\n    borderColor: '#ededed'\n  },\n  text: function text(theme) {\n    return _objectSpread({\n      marginLeft: 10,\n      marginRight: 10,\n      color: theme.colors.grey1\n    }, Platform.select({\n      android: _objectSpread({}, fonts.android.bold),\n      default: {\n        fontWeight: 'bold'\n      }\n    }));\n  }\n};\nexport { CheckBox };\nexport default withTheme(CheckBox, 'CheckBox');","map":{"version":3,"sources":["/Users/galocka/rn-social/node_modules/react-native-elements/src/checkbox/CheckBox.js"],"names":["React","PropTypes","TextElement","CheckBoxIcon","fonts","ViewPropTypes","withTheme","CheckBox","props","theme","rest","Component","checked","iconRight","title","titleProps","center","right","containerStyle","textStyle","wrapperStyle","onPress","onLongPress","checkedTitle","fontFamily","checkedColor","colors","primary","attributes","accessibilityState","StyleSheet","flatten","styles","container","containerHasTitle","wrapper","justifyContent","isValidElement","text","propTypes","elementType","bool","oneOfType","string","element","object","style","NativeText","func","defaultProps","uncheckedColor","checkedIcon","uncheckedIcon","size","TouchableOpacity","flexDirection","alignItems","margin","marginLeft","marginRight","padding","borderWidth","borderRadius","backgroundColor","borderColor","color","grey1","Platform","select","android","bold","default","fontWeight"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  StyleSheet,\n  TouchableOpacity,\n  View,\n  Platform,\n  Text as NativeText,\n} from 'react-native';\n\nimport TextElement from '../text/Text';\nimport CheckBoxIcon from './CheckBoxIcon';\nimport { fonts, ViewPropTypes, withTheme } from '../config';\n\nconst CheckBox = props => {\n  const { theme, ...rest } = props;\n\n  const {\n    Component,\n    checked,\n    iconRight,\n    title,\n    titleProps,\n    center,\n    right,\n    containerStyle,\n    textStyle,\n    wrapperStyle,\n    onPress,\n    onLongPress,\n    checkedTitle,\n    fontFamily,\n    checkedColor = theme.colors.primary,\n    ...attributes\n  } = rest;\n\n  const accessibilityState = {\n    checked: !!checked,\n  };\n\n  return (\n    <Component\n      accessibilityRole=\"checkbox\"\n      accessibilityState={accessibilityState}\n      testID=\"checkbox\"\n      {...attributes}\n      onLongPress={onLongPress}\n      onPress={onPress}\n      style={StyleSheet.flatten([\n        styles.container,\n        title && styles.containerHasTitle,\n        containerStyle && containerStyle,\n      ])}\n    >\n      <View\n        style={StyleSheet.flatten([\n          styles.wrapper,\n          right && { justifyContent: 'flex-end' },\n          center && { justifyContent: 'center' },\n          wrapperStyle && wrapperStyle,\n        ])}\n      >\n        {!iconRight && <CheckBoxIcon {...props} checkedColor={checkedColor} />}\n\n        {React.isValidElement(title) ? (\n          title\n        ) : (\n          <TextElement\n            testID=\"checkboxTitle\"\n            style={StyleSheet.flatten([\n              styles.text(theme),\n              textStyle && textStyle,\n              fontFamily && { fontFamily },\n            ])}\n            {...titleProps}\n          >\n            {checked ? checkedTitle || title : title}\n          </TextElement>\n        )}\n\n        {iconRight && <CheckBoxIcon {...props} checkedColor={checkedColor} />}\n      </View>\n    </Component>\n  );\n};\nCheckBox.propTypes = {\n  ...CheckBoxIcon.propTypes,\n  Component: PropTypes.elementType,\n  iconRight: PropTypes.bool,\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n  titleProps: PropTypes.object,\n  center: PropTypes.bool,\n  right: PropTypes.bool,\n  containerStyle: ViewPropTypes.style,\n  wrapperStyle: ViewPropTypes.style,\n  textStyle: NativeText.propTypes.style,\n  onPress: PropTypes.func,\n  onLongPress: PropTypes.func,\n  checkedTitle: PropTypes.string,\n  fontFamily: PropTypes.string,\n};\n\nCheckBox.defaultProps = {\n  checked: false,\n  iconRight: false,\n  right: false,\n  center: false,\n  uncheckedColor: '#bfbfbf',\n  checkedIcon: 'check-square-o',\n  uncheckedIcon: 'square-o',\n  size: 24,\n  Component: TouchableOpacity,\n  titleProps: {},\n};\n\nconst styles = {\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  container: {\n    margin: 5,\n    marginLeft: 10,\n    marginRight: 10,\n    padding: 10,\n  },\n  containerHasTitle: {\n    borderWidth: 1,\n    borderRadius: 3,\n    backgroundColor: '#fafafa',\n    borderColor: '#ededed',\n  },\n  text: theme => ({\n    marginLeft: 10,\n    marginRight: 10,\n    color: theme.colors.grey1,\n    ...Platform.select({\n      android: {\n        ...fonts.android.bold,\n      },\n      default: {\n        fontWeight: 'bold',\n      },\n    }),\n  }),\n};\n\nexport { CheckBox };\nexport default withTheme(CheckBox, 'CheckBox');\n"]},"metadata":{},"sourceType":"module"}